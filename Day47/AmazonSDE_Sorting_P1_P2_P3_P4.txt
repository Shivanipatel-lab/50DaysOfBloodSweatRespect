PROBLEM-1:
Merge Sort
CODE:
void merge(int arr[], int l, int m, int r)
    {
         // Your code here
         int k=l;
         int i=l;
         int j=m+1;
         int B[r+1];
         while(i<=m and j<=r)
         {
            if(arr[i]<arr[j])
            B[k++]=arr[i++];
            else
            B[k++]=arr[j++];
         }
         for(;i<=m;i++)
         B[k++]=arr[i];
         for(;j<=r;j++)
         B[k++]=arr[j];
         for(int i=l;i<=r;i++)
         arr[i]=B[i];
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        if(l>=r)
        return;
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
PROBLEM-2:
Quick Sort
CODE:
 void quickSort(int arr[], int low, int high)
    {
        // code here
         if(low==high) return ;
       if(low<high)
       {
       
      int index=partition(arr,low,high);
      quickSort(arr, low, index-1 );             //left
      quickSort(arr, index+1 ,high);
       }
    }
    
    public:
    int partition (int arr[], int low, int high)
    {
       // Your code here
       int pivot=arr[high]; //last ele as pivot.
     int i=low-1;
     int j=low;
     
     while(j<=high)      //0000
     {
         if(arr[j]<pivot) 
         {i++; 
         swap(arr[i],arr[j]);
             
         }

         j++;
     }
     swap(arr[i+1] ,arr[high]) ;  
     return i+1;
    }
PROBLEM-3:
Count the number of possible triangles
CODE:
 sort(arr,arr+n);
       int count = 0;
       for(int i=0;i<n-2;i++)
       {
           int c = 1;
           for(int j=i+2;j<n;j++)
           {
               if((arr[i]+arr[i+1])>arr[j])
               count += c;
               else
               {
                   for(int k=i+2;k<j;k++)
                   {
                       if(arr[i]+arr[k]>arr[j])
                       {
                           count+=j-k;
                           break;
                       }
                   }
               }
               c++;
           }
       }
       return count;
PROBLEM-4:
Find triplets with zero sum
CODE:
 bool findTriplets(int arr[], int n)
    { 
        //Your code here
        sort(arr, arr+n);
       
       for(int i = 0; i < n; i++)
       {
           int left = i+1;
           int right = n-1;
           
           while(left < right)
           {
               if(arr[i] + arr[left] + arr[right] == 0)
               {
                   return true;
               }    
               else if(arr[i] + arr[left] + arr[right] > 0)
                   right--;
               else
                   left++;
           }
       }
       return false;
