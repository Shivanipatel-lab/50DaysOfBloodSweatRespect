PROBLEM-6:
Maximum sum increasing subsequence 
CODE:
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
		

	public:
	int maxSumIS(int arr[], int n)  
	{  
	    // Your code goes here
	     int dp[n]={0};
	     if(n==1)
	     return arr[0];
	     int res=arr[0];
	     dp[0]=arr[0];
          for(int i=1; i<n; i++){
        dp[i]=arr[i];
        for(int j=0; j<i; j++){
            if(arr[i]>arr[j]){
                dp[i]=max(dp[i],arr[i]+dp[j]);
            }
        }
        res=max(res,dp[i]);
          }
          return res;
	}  
};

// { Driver Code Starts.
int main() 
{
   	
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];

        for(int i = 0; i < n; i++)
        	cin >> a[i];

      

	    Solution ob;
	    cout << ob.maxSumIS(a, n) << "\n";
	     
    }
    return 0;
}

  // } Driver Code Ends
PROBLEM-7:
Matrix Chain Multiplication
CODE:
// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    
    int dp[1001][1001];
    int mcm(int arr[],int i,int j)
    {
        if(i>=j)
        return 0;
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int mn=INT_MAX;
        for(int k=i;k<=j-1;k++)
        {
            int tmp=mcm(arr,i,k)+mcm(arr,k+1,j)+arr[i-1]*arr[k]*arr[j];
            dp[i][j]=mn=min(mn,tmp);
        }
        return dp[i][j];
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        memset(dp,-1,sizeof(dp));
        return mcm(arr,1,N-1);
        
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        cout<<ob.matrixMultiplication(N, arr)<<endl;
    }
    return 0;
}  // } Driver Code Ends
PROBLEM-8:
Maximum sum path in the matrix, (count paths and similar type do, also backtrack to find the maximum path)
CODE:
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        
        
     /*   int n=grid.size(),m=grid[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0 && j==0)
                    continue;
                else if(i==0)
                    grid[i][j]+=grid[i][j-1];
                else if(j==0)
                    grid[i][j]+=grid[i-1][j];
                else
                    grid[i][j]=grid[i][j]+min(grid[i-1][j],grid[i][j-1]);
            }
        }
        return grid[n-1][m-1];*/
         int n=grid.size(),m=grid[0].size();
        for(int i=1;i<n;i++)
        {
            grid[i][0]+=grid[i-1][0];
        }
        for(int j=1;j<m;j++)
        {
            grid[0][j]+=grid[0][j-1];
        }
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                grid[i][j]+=min(grid[i-1][j],grid[i][j-1]);
            }
        }
        return grid[n-1][m-1];
    }
};