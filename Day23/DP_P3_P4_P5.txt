PROBLEM-24:
Longest Common Subsequence
CODE:
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        
       // vector<string>s;
        int m=text1.size();
        int n=text2.size();
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++)
        {
            dp[i][0]=0;
        }
        for(int j=0;j<=n;j++)
        {
             dp[0][j]=0;
        }
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(text1[i-1]==text2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
        
       
    }
};

PROBLEM-4:
0-1 Knapsack
CODE:
class Solution {
public:
    /*unordered_map<string,vector<int>>mp;
    int dp[601][101][101];

    
    int recurs(vector<string>& strs, int m, int n,int i)
    {
        if(i<0||m<0||n<0)
        {
            return 0;
        }
        
        if(dp[i][m][n]!=-1)
        {
            return dp[i][m][n];
        }
        
        if(mp[strs[i]][0]<=m&&mp[strs[i]][1]<=n)
        {
            return dp[i][m][n]= max(recurs(strs,m-mp[strs[i]][0],n-mp[strs[i]][1],i-1)+1,recurs(strs,m,n,i-1));
        }
        else
        {
            return dp[i][m][n]= recurs(strs,m,n,i-1);
        }
        
    }

    
    int findMaxForm(vector<string>& strs, int m, int n) {
        
        
        for(int i=0;i<=strs.size();i++)
        {
            for(int j=0;j<=m;j++)
            {
                for(int k=0;k<=n;k++)
                {
                    dp[i][j][k]=-1;
                }
            }
        }
        
        
        
        
        
        
        
        
        
        for(auto x:strs)
        {
            int z=0,o=0;
            for(int i=0;i<x.length();i++)
            {
                if(x[i]=='0')
                {
                    o++;
                }
                if(x[i]=='1')
                {
                    z++;
                }
            }
            mp[x].push_back(o);
            mp[x].push_back(z);
        }
            
         return recurs(strs,m,n,strs.size()-1); 
            

        }
*/
    vector<vector<vector<int>>>dp;
    int maxOneandZero(vector<string>& strs,int i,int m,int n)
    {
        if(m<0 || n<0)
            return -1e9;
        if(m==0 and n==0)
            return 0;
        if(i==strs.size())
            return 0;
        if(dp[i][m][n]!=-1)
            return dp[i][m][n];
        
        int c1=0;
        int c2=0;
        
        for(auto it:strs[i])
        {
            if(it=='1')
                c1++;
            else
                c2++;
        }
        return dp[i][m][n]=max(1+maxOneandZero(strs,i+1,m-c2,n-c1),maxOneandZero(strs,i+1,m,n));
    }
     int findMaxForm(vector<string>& strs, int m, int n) {
        int s = strs.size();
        dp.resize(s, vector<vector<int>>(m+1, vector<int>(n+1,-1)));
        
        return max(maxOneandZero(strs,0,m,n),0);
     }
};

PROBLEM-5:
Edit Distance
CODE:
class Solution {
public:
    int minDistance(string word1, string word2) {
        
         
        
        int m=word1.size();
        int n=word2.size();
        int dp[m+1][n+1];
        for(int i=0;i<=n;i++) dp[0][i]=i;
        for(int i=0;i<=m;i++) dp[i][0]=i;
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(word1[i-1]==word2[j-1]) dp[i][j]=dp[i-1][j-1];
                else dp[i][j]=1+min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]));
            }
        }
        return(dp[m][n]);
     
        
    }
};
