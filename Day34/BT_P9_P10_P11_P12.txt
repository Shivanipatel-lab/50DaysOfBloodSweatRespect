PROBLEM-9:
Vertical order traversal
CODE:
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
       
        map<int,map<int,multiset<int>>>nodes;
        queue<pair<TreeNode*,pair<int,int>>>q;//(node,value,level)
        q.push({root,{0,0}});
        while(!q.empty())
        {
            auto p=q.front();
            q.pop();
            TreeNode* node=p.first;
            int x=p.second.first,y=p.second.second;
            nodes[x][y].insert(node->val);
            if(node->left)
            {
                q.push({node->left,{x-1,y+1}});
            }
            if(node->right)
            {
                q.push({node->right,{x+1,y+1}});
            }
        }
        vector<vector<int>>res;
        for(auto p:nodes)
        {
            vector<int>col;
            for( auto i:p.second)
            {
                col.insert(col.end(),i.second.begin(),i.second.end());
            }
            res.push_back(col);
        }
            
        return res;
        
    }
};
PROBLEM-10:
Root to node path in a Binary Tree
CODE:

PROBLEM-11:
Max width of a Binary Tree
CODE:
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        
        if(root==NULL)
            return 0;
        int res=0;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty())
        {
            int n=q.size();
            int min=q.front().second;
            int first,last;
            for(int i=0;i<n;i++)
            {
                int cur=q.front().second-min;//subtract to prevent integer overflow
                TreeNode* node=q.front().first;
                q.pop();
                if(i==0)
                    first=cur;
                if(i==n-1)
                    last=cur;
                if(node->left)
                {
                    q.push({node->left,cur*2+1});
                }
                if(node->right)
                {
                    q.push({node->right,cur*2+2});
                }
                
            }
            res=max(res,last-first+1);
        }
        return res;
    }
};
PROBLEM-12:
Level order Traversal / Level order traversal in spiral form
CODE:
class Solution {
public:
    vector<vector<int>>res;
    void dfs(TreeNode* root,int depth)
    {
        if(root==NULL)
       return;
        if(res.size()==depth)
            res.push_back(vector<int>());
        res[depth].push_back(root->val);
        dfs(root->left,depth+1);
        dfs(root->right,depth+1);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        
    /*    vector<vector<int>>ans;
        if(root==NULL)
            return ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            vector<int>level;
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                if(node->left!=NULL)
                    q.push(node->left);
                if(node->right!=NULL)
                    q.push(node->right);
                level.push_back(node->val);
                    
            }
            ans.push_back(level);
        }
        return ans;*/
        
        if(root==NULL)
            return res;
        dfs(root,0);
        return res;
    }
};