PROBLEM-13:
Height of a Binary Tree
CODE:
class Solution {
public:
    int maxDepth(TreeNode* root) {
        
        if(root==NULL)
            return 0;
        return max(maxDepth(root->left),maxDepth(root->right))+1;
    }
};
PROBLEM-14:
Diameter of Binary Tree
CODE:
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        
        int diameter=0;
        height(root,diameter);
        return diameter;
    }
    
    int height(TreeNode* node,int &diameter)
    {
        if(node==NULL)
            return 0;
        int lh=height(node->left,diameter);
        int rh=height(node->right,diameter);
        diameter=max(diameter,lh+rh);
        return 1+max(lh,rh);
            
    }
};
PROBLEM-15:
Check if the Binary tree is height-balanced or not
CODE:
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
        if(p==NULL && q==NULL)
            return true;
        if(q==NULL || p==NULL)
            return false;
        if(p->val!=q->val)
            return false;
        return isSameTree(p->right,q->right) and isSameTree(p->left,q->left);
        
    
    }
};
PROBLEM-16:
LCA in Binary Tree
CODE:
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        
        if(root==NULL || root==p || root==q)
        {
            return root;
        }
        TreeNode* left=lowestCommonAncestor(root->left,p,q);
        TreeNode* right=lowestCommonAncestor(root->right,p,q);
        
        if(left==NULL)
            return right;
        else if(right==NULL)
            return left;
        else
            return root;
    }
};