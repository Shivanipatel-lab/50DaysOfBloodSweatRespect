PROBLEM-9:
Sorted subsequence of size 3
CODE:
 vector<int> find3Numbers(vector<int> arr, int N) {
        // Your code here
        stack<int>s;
        for(int i=N-1;i>=0;i--)
        {
            while(!s.empty() and s.top()<=arr[i])
            s.pop();
            s.push(arr[i]);
            if(s.size()==3)
            break;
        }
        vector<int>res;
        while(!s.empty())
        {
            res.push_back(s.top());
            s.pop();
        }
        if(res.size()!=3)
        return {};
        return res;
    }
PROBLEM-10:
Find duplicates in an array
CODE:
/ { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
       sort(arr,arr+n);int p=0,q=0;vector<int>v;
                        for(int i=0;i<n-1;i++)
                        {   if (arr[n-2]==arr[n-1] && i==n-2)
                               { v.push_back(arr[n-2]);q++;}
                            else if(arr[i]==arr[i+1])
                            {    p++;q++;}
                            
                            else
                                {   if(p>0)
                                    {v.push_back(arr[i]);p=0;}
                                }
                        }
                        if(q==0)
                            v.push_back(-1);
                    return v;
       
    }
};


// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t-- > 0) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        Solution obj;
        vector<int> ans = obj.duplicates(a, n);
        for (int i : ans) cout << i << ' ';
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends
PROBLEM-11:
Mountain Subarray Problem
CODE:
 vector<bool> processQueries(int a[], int n, vector<pair<int, int>> &queries,
                                int q) {
        // code here
        vector<bool>v(q,false);
        for(int i=0;i<q;i++)
        {
            int s=queries[i].first;
            int d=queries[i].second;
            
            while(s<d)
            {
                if(a[s]>a[s+1])
                break;
                s++;
            }
            while(s<d)
            {
                if(a[s]<a[s+1])
                break;
                s++;
            }
            if(s==d)
            v[i]=true;
        }
        return v;
PROBLEM-12:
CODE: