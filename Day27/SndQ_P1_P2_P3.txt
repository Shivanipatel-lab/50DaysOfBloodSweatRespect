PROBLEM-1:
Implement Stack using Queues
CODE:
class MyStack {
public:
    
    queue<int>q1;
    queue<int>q2;
    MyStack() {
        
    }
    
    void push(int x) {
       while(!q1.empty()){
           int top = q1.front();
           q1.pop();
           q2.push(top) ;
       }
        q1.push(x);
        while(!q2.empty()){
           int top = q2.front();
           q2.pop();
           q1.push(top) ;
       }
    }
     
    
    
    int pop() {
     int top=q1.front();
        q1.pop();
        return top;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty();
    }
};
PROBLEM-2:
Check for balanced parentheses
CODE:
class Solution {
public:
    bool isValid(string s) {
       
        
        //using stack
        //o(N)
        //sc o(N)
        
        stack<int>st;
        
        
        
           //stack st;
         for (int i=0;i<s.size();i++){
                 if(s[i]=='('||s[i]=='{'||s[i]=='['){
                     st.push(s[i]);
                      }
                         else{
                                if(st.size()==0) return false;
                                     if(s[i]==')'&& st.top()=='('||s[i]=='}'&& st.top()=='{'||s[i]==']'&&                                                        st.top()=='['){
                                                  st.pop();
                  }
                                                 else {return false;}
    }
}
                    if(st.size()==0) {return true;}
                                  return false;
    }
};
PROBLEM-3:
Next Greater Element
CODE:
stack<int>s;
        unordered_map<int,int>m;
        
        s.push(nums2.back());
        for(int i=nums2.size()-2;i>=0;i--)
        {
            while(!s.empty() and nums2[i]>s.top())
            {
                s.pop();
            }
            if(!s.empty())
                m[nums2[i]]=s.top();
                s.push(nums2[i]);
        }
        vector<int>nge;
        for(auto it:nums1)
            nge.push_back(m[it]?m[it]:-1);
        return nge;