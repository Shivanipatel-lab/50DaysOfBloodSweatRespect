PROBLEM-3:
Binary Tree to BST
CODE:
class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void inorder(Node* root,vector<int>&v){
       if(root==NULL){
           return;
       }
       inorder(root->left,v);
       v.push_back(root->data);
       inorder(root->right,v);
   }
    
    Node* bst(Node *root1,vector<int>v,int s,int e){
       if(s>e){
           return NULL;
       }
       int mid=(s+e)/2;
       root1=new Node(v[mid]);
       root1->left=bst(root1->left,v,s,mid-1);
       root1->right=bst(root1->right,v,mid+1,e);
       return root1;
       
   }
    Node *binaryTreeToBST (Node *root)
    {
        //Your code goes here
         vector<int>v;
       inorder(root,v);
       sort(v.begin(),v.end());
       Node* root1=NULL;
       int s=0;
       int e=v.size()-1;
       return bst(root1,v,s,e);
        
    }
};
PROBLEM-4:
Kth largest element in BST
CODE:
class Solution
{
    public:
    
    void inorder(Node *root,vector<int>&v)
    {
        if(root==NULL)
        return ;
        inorder(root->left,v);
        v.push_back(root->data);
        inorder(root->right,v);
    }
    int kthLargest(Node *root, int K)
    {
        //Your code here
        
        vector<int>v;
        inorder(root,v);
        sort(v.begin(),v.end());
        int ans=v.size()-K;
        return v[ans];
    }
};