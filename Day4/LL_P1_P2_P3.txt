
PROBLEM-1:
Reverse a LinkedList
CODE:
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        /* ListNode *newHead = NULL;
        while (head != NULL) {
            ListNode *next = head->next;
            head->next = newHead;
            newHead = head;
            head = next;
        }
        return newHead;*/
        
        ListNode* cur=head;
        ListNode* prev=NULL;
        while(cur!=NULL)
        {
            ListNode* temp=cur->next;
            cur->next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
};


PROBLEM-2:
Find the middle of LinkedList
CODE:
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow=head;
        ListNode *fast=head;
        if(head!=NULL)
        while(fast!=NULL &&fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
};

PROBLEM-3:
Merge two sorted Linked List (use method used in mergeSort)
CODE:
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        ListNode *ans=NULL;
        if(!l1)
            return l2;
        else if(!l2)
            return l1;
        if(l1->val <= l2->val)
        {
            ans=l1;
            ans->next=mergeTwoLists(l1->next,l2);
        }
        else
        {
            ans=l2;
            ans->next=mergeTwoLists(l1,l2->next);
        }
        return ans;
    }
};