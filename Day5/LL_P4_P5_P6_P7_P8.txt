
PROBLEM-4:
Remove N-th node from back of LinkedList
CODE:
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
      /*  ListNode* start=new ListNode();
        start->next=head;
        ListNode* fast=start;
        ListNode* slow=start;
        for(int i=1;i<=n;i++)
            fast=fast->next;
        while(fast->next!=NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }
        slow->next=slow->next->next;
        return start->next;*/
        
        
        
        //using count number of node nd minus to n
        ListNode* dummy=new ListNode();
        dummy->next=head;
        int c=0;
        while(dummy->next!=NULL)
        {
            dummy=dummy->next;
            c++;
        }
        int num=c-n;
        ListNode* tmp=new ListNode();
        tmp->next=head;
        while(num!=0)
        {
            tmp=tmp->next;
            num--;
        }
        if(c!=n)
        {
            tmp->next=tmp->next->next;
            return head;
        }
        else
        {
            head=head->next;
            return head;
        }
    }
};


PROBLEM-5:
Add two numbers as LinkedList
CODE:
  ListNode* dummy=new ListNode(0);
        ListNode* temp=dummy;
        int carry=0;
        while(l1!=NULL || l2!=NULL || carry)
        {
            int sum=0;
            if(l1!=NULL)
            {
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL)
            {
                sum+=l2->val;
                l2=l2->next;
            }
            sum+=carry;
            carry=sum/10;
            ListNode *node=new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        return dummy->next;


PROBLEM-6:
Delete a given Node when a node is given.(0(1) solution)
CODE: 
class Solution {
public:
    
    
    void deleteNode(ListNode* node) {
        
        node->val=node->next->val;
        node->next=node->next->next;
        return;
       
        
       
        
    }
};

PROBLEM-7:
Find intersection point of Y LinkedList
CODE:
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
    /*    //TC=O(N)
        //SC=O(1)
        int length1=0;
        int length2=0;
        ListNode* h1=headA;
        ListNode* h2=headB;
        while(headA)
        {
            length1++;
            headA=headA->next;
        }
         while(headB)
        {
            length2++;
            headB=headB->next;
        }
        
        int diff=abs(length1-length2);
        if(length1>length2)
        {
            while(diff--)
            h1=h1->next;
        }
        else
        {
            while(diff--)
                h2=h2->next;
        }
        while(h1 and h2)
        {
            if(h1==h2)
                return h1;
            h1=h1->next;
            h2=h2->next;
        }
        return NULL;
        */
        
        
        //2nd method
      if(headA == NULL || headB == NULL) return NULL;
    
        ListNode *a = headA;
        ListNode *b = headB;

        //if a & b have different len, then we will stop the loop after second iteration
        while( a != b){
            //for the end of first iteration, we just reset the pointer to the head of another linkedlist
            a = a == NULL? headB : a->next;
            b = b == NULL? headA : b->next;    
        }

        return a;

        
    }
};


PROBLEM-8:
Detect a cycle in Linked List
CODE:
class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(fast==slow){
                return true;
            }
        }
        return false;
    }
};

