PROBLEM-P1:
N-Queens
CODE:
class Solution {

    
    void helper(int col, vector<string>&board, vector<vector<string>>&res,vector<int>&leftrow,vector<int>&upperDiag,vector<int>&lowerDiag,int n)
    {
        if(col==n)
        {
            res.push_back(board);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(leftrow[row]==0 and lowerDiag[row+col]==0 and upperDiag[n-1+col-row]==0)
            {
                board[row][col]='Q';
                leftrow[row]=1;
                lowerDiag[row+col]=1;
                upperDiag[n-1+col-row]=1;
                helper(col+1,board,res,leftrow,upperDiag,lowerDiag,n);
                board[row][col]='.';
                leftrow[row]=0;
                lowerDiag[row+col]=0;
                upperDiag[n-1+col-row]=0;
                
            }
        }
    }
    public:
    vector<vector<string>> solveNQueens(int n) {
        
        //using hashing is optimal solution of TC(O(N^2));
        vector<vector<string>>res;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        vector<int>leftrow(n,0),upperDiag(2*n-1,0),lowerDiag(2*n-1,0);
        helper(0,board,res,leftrow,upperDiag,lowerDiag,n);
        return res;
    }
};

PROBLEM-2:
Permutations
CODE:
class Solution {
   
    void recurP(vector<int>&nums,vector<vector<int>>&ans,int index)
    {
        if(index==nums.size())
        {
            ans.push_back(nums);
            return;
        }
        for(int j=index;j<nums.size();j++)
        {
            swap(nums[index],nums[j]);
            recurP(nums,ans,index+1);
            swap(nums[index],nums[j]);
        }
    }
    
   
        
public:
    vector<vector<int>> permute(vector<int>& nums) {
        
        vector<vector<int>>ans;
        
        recurP(nums,ans,0);
        return ans;
        
    }
};