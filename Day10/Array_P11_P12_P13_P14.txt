PROBLEM:
Repeat and Missing Number
CODE:
// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends
class Solution{
public:
    int *findTwoElement(int *arr, int n) {
        // code here
        
        int a,b;
        for(int i=0;i<n;i++)
        {
            if(arr[abs(arr[i])-1]<0)
            {
                a=abs(arr[i]);
            }
            else
            {
                arr[abs(arr[i])-1]= -arr[abs(arr[i])-1];
            }
        }
        
        for(int i=0;i<n;i++)
        {
            if(arr[i]>0)
            {
                b=i+1;
                break;
            }
        }
        int *v=new int[2];
        v[0]=a;
        v[1]=b;
        return v;
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findTwoElement(a, n);
        cout << ans[0] << " " << ans[1] << "\n";
    }
    return 0;
}  // } Driver Code Ends

PROBLEM-12:
Inversion of Array (Pre-req: Merge Sort)
CODE:
long long getInversions(long long *arr, int n){
    // Write your code here.
    long long inversionCount = 0;
    for (long long i = 0; i < n - 1; i++)
    {
        for (long long j = i + 1; j < n; j++)
        {
            if (arr[i] > arr[j]) {
                inversionCount++;
            }
           
        }
    }
    return inversionCount;
    
}

PROBLEM-13:
Search in a 2d Matrix
CODE:
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
      /*  if(!matrix.size())
            return false;
        
        int n = matrix.size();
        int m = matrix[0].size();
        
        int lo = 0;
        int hi = (n*m)-1;
        
        while(lo<=hi)
        {
            int mid = (lo + (hi - lo) / 2);
            if(matrix[mid/m][mid%m]==target)
            {
                return true;
                
            }
            if(matrix[mid/m][mid%m]<target)
            {
                lo=mid+1;
            }
            else
            {
                hi=mid-1;
            }
        }
        return false;*/
        
        //brute force TC:O(MN)
        //better TC:O(NLOGM)
        int r=matrix.size();
        int c=matrix[0].size();
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(matrix[i][j]==target)
                {
                    return true;
                }
               
            }
        }
        return false;
    }

    PROBLEM-14:
    Pow(X,n)
    CODE:
    class Solution {
private:
double power(double x, int n){

    if(n==0)
        return 1;
    double ans=power(x,n/2);
    if(n&1)
        return x*ans*ans;
    else 
        return ans*ans;
}
public:
double myPow(double x, int n) {

    double ans=power(x,n);
    if(n<0)
        return 1/ans;
    return ans;
}
};