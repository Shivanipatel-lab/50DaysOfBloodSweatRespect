PROBLEM-5:
LeftView Of Binary Tree
CODE:
 void leftSideRec(Node* root,int level,vector<int>&res)
    {
        if(root==NULL)
            return;
        if(res.size()==level)
            res.push_back(root->data);
            leftSideRec(root->left,level+1,res);
            leftSideRec(root->right,level+1,res);
    }
vector<int> leftView(Node *root)
{
   // Your code here
   vector<int>res;
   leftSideRec(root,0,res);
   return res;
   
}

PROBLEM-6:
Bottom View of Binary Tree
CODE:
class Solution {
  public:
    vector <int> bottomView(Node *root) {
        vector<int> ans; 
        if(root == NULL) return ans; 
        map<int,int> mpp; 
        queue<pair<Node*, int>> q; 
        q.push({root, 0}); 
        while(!q.empty()) {
            auto it = q.front(); 
            q.pop(); 
            Node* node = it.first; 
            int line = it.second; 
            mpp[line] = node->data; 
            
            if(node->left != NULL) {
                q.push({node->left, line-1}); 
            }
            if(node->right != NULL) {
                q.push({node->right, line + 1}); 
            }
            
        }
        
        for(auto it : mpp) {
            ans.push_back(it.second); 
        }
        return ans;  
    }
};
PROBLEM-7:
Top View of Binary Tree
CODE:
class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        //Your code here
        
        vector<int> ans; 
        if(root == NULL) return ans; 
        map<int,int> mpp; 
        queue<pair<Node*, int>> q; 
        q.push({root, 0}); 
        while(!q.empty()) {
            auto it = q.front(); 
            q.pop(); 
            Node* node = it.first; 
            int line = it.second; 
           // mpp[line] = node->data; 
            if(mpp.find(line)==mpp.end())
            mpp[line]=node->data;
            
            if(node->left != NULL) {
                 q.push({node->left, line-1}); 
                
            }
            if(node->right != NULL) {
               q.push({node->right, line + 1}); 
            }
            
        }
        
        for(auto it : mpp) {
            ans.push_back(it.second); 
        }
        return ans;  
    }

};
PROBLEM-8:
Preorder inorder postorder in a single traversal
CODE:


