PROBLEM-3:
Set Matrix Zeroes
CODE:
  void setZeroes(vector<vector<int>>& matrix) {
      bool zr=false,zc=false;
    for(int i=0;i<matrix.size();i++)
        if(matrix[i][0]==0)zc=true;
    for(int i=0;i<matrix[0].size();i++)
        if(matrix[0][i]==0)zr=true;
    
    // Update storage according to if that particular row and column have any element 0
    for(int i=1;i<matrix.size();i++){
        for(int j=1;j<matrix[0].size();j++){
            if(!matrix[i][j]){
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }
    
    // Now according to storage make all others 0
    //Checking for all rows
    for(int i=1;i<matrix.size();i++){
        if(!matrix[i][0]){
            for(int j=1;j<matrix[0].size();j++)matrix[i][j]=0;
        }
    }
    //Checking for all cols
    for(int j=1;j<matrix[0].size();j++){
        if(!matrix[0][j]){
            for(int i=1;i<matrix.size();i++)matrix[i][j]=0;
        }
    }
    
    //Now check if zc or zr are true
    if(zc)for(int i=0;i<matrix.size();i++)matrix[i][0]=0;
    if(zr)for(int j=0;j<matrix[0].size();j++)matrix[0][j]=0;
}

PROBLEM-4:
Pascal's Triangle
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>r(numRows);
        
        for(int i=0;i<numRows;i++)
        {   
            r[i].resize(i+1);
            r[i][0]=r[i][i]=1;//set first and last value to 1
            
            for(int j=1;j<i;j++)
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            
        }
        return r;
    }
};

PROBLEM-5:
31. Next Permutation
 void nextPermutation(vector<int>& nums) {
     /*   int n=nums.size();
        int k,l;
        
        //find break point
        for(k=n-2;k>=0;k--)
        {
            if(nums[k] < nums[k+1])
            {
                break;
            }
        }
        //if no break point simply reverse
        if(k<0)
        {
            reverse(nums.begin(),nums.end());
        }
        //if break pint
        else
        {
            for(i=n-1;i>k;i--)
            {
                if(nums[i]>nums[k])
                {
                    break;
                }
            }
            swap(nums[k],nums[i]);
            reverse(nums.begin()+k+1,nums.end());
        }
        }

PROBLEM-6:
Maximum Subarray
CODE:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
     /*   int sum=0;
        int maxi=INT_MIN;
        for(auto it:nums)
        {
            sum+=it;
            maxi=max(sum,maxi);
            if(sum<0)
                sum=0;
        }
        return maxi;*/
         int sum=0;
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            maxi=max(sum,maxi);
            if(sum<0)
               sum=0;
        }
        return maxi;
    }
};
