PROBLEM-1:
Max Product Subarray
CODE:
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
    /*    int n=nums.size();
        int dp[n][2];
        
        dp[0][0]=nums[0];
        dp[0][1]=nums[0];
        int ans=dp[0][0];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        for(int i=1;i<n;i++){
            dp[i][0] = max(nums[i],max(dp[i-1][0]*nums[i],dp[i-1][1]*nums[i]));
            dp[i][1] = min(nums[i],min(dp[i-1][0]*nums[i],dp[i-1][1]*nums[i]));
            ans = max(ans,dp[i][0]);
        }
        return ans;*/
      int r=nums[0];
     int maxi=r;
     int mini=r;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]<0)
            {
                int temp=maxi;
                maxi=mini;
                mini=temp;
            }
            maxi=max(nums[i],nums[i]*maxi);
            mini=min(nums[i],nums[i]*mini);
            r=max(r,maxi);
        }
        return r;
        
        //brute force due to time limit did not accepted
       // int maxProduct(vector<int>& A) {
        /*int ans = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            int curProd = 1;
            for(int j = i; j < nums.size(); j++)
                curProd *= nums[j],
                ans = max(ans, curProd);
        }
        return ans;*/
    }
    
};
PROBLEM-2:
Longest Increasing Subsequence
CODE:
class Solution {
public:
    
   
   
    int lengthOfLIS(vector<int>& nums) {
        
      /*  int dp[nums.size()];
        for(int i=0;i<nums.size();i++){
            dp[i]=1;
        }
        int maxseq=1;
        for(int i=1;i<nums.size();i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i]=max(dp[i],1+dp[j]); 
					maxseq=max(dp[i],maxseq); 
					//maxseq is the length of the maximum increasing sequence till now.
                }
            }
        }
        return maxseq; 
        */
        
        vector<int>seq;
        seq.push_back(nums[0]);
        int n=nums.size();
        for(int i=1;i<n;i++)
        {
            if(seq.back()<nums[i])
                seq.push_back(nums[i]);
            else
            {
                int ind=lower_bound(seq.begin(),seq.end(),nums[i])-seq.begin();
                seq[ind]=nums[i];
            }
        }
          return seq.size();  
    }
};