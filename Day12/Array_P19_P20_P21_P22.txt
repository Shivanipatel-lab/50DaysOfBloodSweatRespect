PROBLEM-19:
2-Sum-Problem
CODE:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       // vector<int>sum;
        vector<int>res;
        unordered_map<int,int>mpp;
     /* for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    sum.push_back(i);
                    sum.push_back(j);
                }
            }
        }
        return sum;   */
        for(int i=0;i<nums.size();++i)
        {
            if(mpp.find(target-nums[i])!=mpp.end())
            {
                res.emplace_back(i);
                res.emplace_back(mpp[target-nums[i]]);
                return res;
            }
            mpp[nums[i]]=i;
        }
        
        return res;
    }
};

PROBLEM-20:
4-sum-Problem
CODE:

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
 /*   
vector<vector<int>> res;
// just sort the array it takes O(nlogn)
sort(nums.begin(),nums.end());
int n=nums.size();
for(int i=0;i<n;i++)
{
for(int j=i+1;j<n;j++)
{
int target_2=target-(nums[i]+nums[j]);

            int low=j+1,high=n-1;
             while(low<high)
             {
                 int result=nums[low]+nums[high];
                 if(result<target_2)
                     low++;
                 else if(result>target_2)
                     high--;
                 else{
                     vector<int> arr(4,0);
                 arr[0]=nums[i];
                 arr[1]=nums[j];
                 arr[2]=nums[low];
                 arr[3]=nums[high];
                 res.emplace_back(arr);
				 //processing the duplicates of number 3
                     while(low<high && nums[low]==arr[2] )++low;
					 //processing the duplicates of number 4
                     while(low<high && nums[high]==arr[3]) --high;
             }
             }
//processing the duplicates of number 2
while(j+1<n && nums[j+1]==nums[j])++j;

        }
		//processing the duplicates of number 1
        while(i+1<n && nums[i+1]==nums[i])++i;
    }
    return res;*/
        
        //hashing
       
  /*      vector<vector<int>> ans;
        int n = nums.size();
        if(n<4)
            return ans;
        
        sort(nums.begin(),nums.end());
        unordered_map<int,vector<pair<int,int>>> m;    //key->SUM...Value->(i,j) pair of index where i<j
        //Store all sum pairs in map
        for(int i=0;i<n-1;++i)
            for(int j=i+1;j<n;++j)
                m[nums[i]+nums[j]].push_back(make_pair(i,j));
        
        for(int i=0;i<n-1;++i) {
            if(i>0 and nums[i]==nums[i-1])  continue;
            for(int j=i+1;j<n;++j) {
                if(j>i+1 and nums[j]==nums[j-1])  continue;
                int sum = target-nums[i]-nums[j];
                if(m.find(sum)!=m.end()) {
                    for(auto it: m[sum])    {
                        int k=it.first;
                        int l=it.second;
                        if(k>j) {   //Maintain the increasing order of index (i,j,k,l).....i<j<k<l
                            //Skip invalid cases
                            if(!ans.empty() and ans.back()[0]==nums[i] and ans.back()[1]==nums[j] and ans.back()[2]==nums[k] and ans.back()[3]==nums[l])
                                continue;
                            vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                            ans.push_back(temp);
                        }
                    }
                }
            }
        }
        return ans;*/
        
        vector<vector<int>>res;
        int n=nums.size();
        if(nums.empty())
            return res;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            int target3=target-nums[i];
        
        for(int j=i+1;j<nums.size();j++)
        {
            int target2=target3-nums[j];
            
            int front=j+1;
            int back=n-1;
            
            while(front<back)
            {
                int sum=nums[front]+nums[back];
                if(sum<target2)
                    front++;
                else if(sum>target2)
                    back--;
                else
                {
                    vector<int>quad(4,0);
                    quad[0]=nums[i];
                    quad[1]=nums[j];
                    quad[2]=nums[front];
                    quad[3]=nums[back];
                    res.push_back(quad);
                    while(front<back and nums[front]==quad[2])
                        front++;
                    while(front<back and nums[back]==quad[3])
                        back--;
                }
            }
            while(j + 1 < n && nums[j + 1] == nums[j]) ++j;
        }
        while (i + 1 < n && nums[i + 1] == nums[i]) ++i;
        }
        return res;
    }

};

PROBLEM-21:
Longest Consecutive Sequence
CODE:
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        /*
        //by hasing
        //create a hashset
        set<int> hashSet;
        
        //iterate nums array
        
        for(int num:nums)
        {
            //insert num in hashset
            
             hashSet.insert(num);
        }
        
        int ls=0;//longer streak
        for(int num:nums)
        {
            if(!hashSet.count(num-1)) //check the num like 100 ,so 99 is exist or not
            {
                int currentNum=num;
                int currentStreak=1;
                
                while(hashSet.count(currentNum+1))//check for 100,so 101 is exist or not
                {
                    currentNum += 1;
                    currentStreak += 1;
                }
            
            
            ls=max(ls,currentStreak);
            }
                
        }
        return ls;
        
      */  
        
       //using sorting 
    /*    int n=nums.size();
        if(n==0)
            return 0;
        sort(nums.begin(),nums.end());
        int c=1;
        int l=1;//long
      
        for(int i=1;i<n;i++)
        {
            if(nums[i]!=nums[i-1])
            {
                if(nums[i]==nums[i-1]+1)
                {
                    c++;
                }
                else
                {
                    l=max(l,c);
                    c=1;
                }
                    
            }
        }
        return max(l,c);
        */
        
        set<int>s(nums.begin(),nums.end());
        int c=1;
        int l=0;
        for(int num:nums)
        {  
            c=1;
            int curr=num;
            if(s.find(num-1)==s.end())
            
                while(s.find(curr++)!=s.end())
                
                    l=max(l,c++);
                
               
        }
        return l;
    }
};

PROBLEM-22:
Largest Subarray with 0 sum
CODE:
// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
/*You are required to complete this function*/

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        
        unordered_map<int,int>m;
        int maxi=0;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+A[i];
            if(sum==0)
            {
                maxi=i+1;
            }
            else
            {
                if(m.find(sum)!=m.end())   
                {
                    maxi=max(maxi,i-m[sum]);//logic->store sum like first 0+15 =15 then 
                                            //15-2=13 then 13+2=15 so 15 is already preseent in 
                                             //map so find index where it is find prev-curr =max update
                }
                else
                {
                    m[sum]=i;
                }
            }
        }
        return maxi;
    }
};


// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m;
        cin>>m;
        vector<int> array1(m);
        for (int i = 0; i < m; ++i){
            cin>>array1[i];
        }
        Solution ob;
        cout<<ob.maxLen(array1,m)<<endl;
    }
    return 0; 
}


  // } Driver Code Ends

