PROBLEM-21:
Construct Binary Tree from inorder and preorder
CODE:
class Solution {
public:
  /*  TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int, int> inMap; 

        for(int i = 0; i < inorder.size(); i++) {
            inMap[inorder[i]] = i;
        }

        TreeNode* root = buildTree(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, inMap);
        return root;
    }
   TreeNode* buildTree(vector<int>& preorder, int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int, int> &inMap) {
        if(preStart > preEnd || inStart > inEnd) return NULL;

        TreeNode* root = new TreeNode(preorder[preStart]);
        int inRoot = inMap[root->val];
        int numsLeft = inRoot - inStart;

        root->left = buildTree(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot - 1, inMap);
        root->right = buildTree(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1, inEnd, inMap);

        return root;*/
    
    //TC:O(N)
    
    unordered_map<int,int>mp;
     int i=0;
    TreeNode* build(vector<int>& p, vector<int>& in,int s,int e)
    {   
       
        if(s>e)
            return NULL;
        TreeNode* r=new TreeNode(p[i++]);
        int mid=mp[r->val];
        r->left=build(p,in,s,mid-1);
        r->right=build(p,in,mid+1,e);
        return r;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)
    {
        
       for(int i=0;i<inorder.size();i++)
       {
           mp[inorder[i]]=i;
       }
       return build(preorder,inorder,0,inorder.size()-1);
    }
    
};
PROBLEM-22:
Symmetric Binary Tree
CODE:
class Solution {
public:
  /*  bool check(TreeNode* root1,TreeNode* root2)
    {
        if(root1==NULL and root2==NULL)
            return true;
        if(root1==NULL || root2==NULL)
            return false;
        if(root1->val!=root2->val)
        {
            return false;
        }
        bool check1=check(root1->right,root2->left);
        bool check2=check(root1->left,root2->right);
        
        if(!check1 || !check2)
        {
            return false;
        }
        return true;
    }*/
    bool dfs(TreeNode* root1,TreeNode* root2)
    {
        if(root1==NULL and root2==NULL)
        {
            return true;
        }
        if(root1==NULL or root2==NULL)
        {
            return false;
        }
        return ((root1->val==root2->val) and dfs(root1->left,root2->right )and dfs(root1->right,root2->left));
    }
    bool isSymmetric(TreeNode* root) {
        
        //return check(root,root);
        return dfs(root->left,root->right);
    }
};
PROBLEM-23:
Flatten Binary Tree to LinkedList
CODE:
class Solution {
public:
    
    // TC - O(N) 
// SC - O(1)
    void flatten(TreeNode* root) {
        
        //using stack
        //TC(O(N))
        //SC(O(N))
      /*  TreeNode* cur= root;
        while(cur!=NULL)
        {
            if(cur->left!=NULL)
            {
                TreeNode* prev=cur->left;
                while(prev->right)
                {
                    prev=prev->right;
                }
                prev->right=cur->right;
                cur->right=cur->left;
                cur->left=NULL;
            }
            cur=cur->right;
        }
        
       */ 
        
        stack<TreeNode*>st;
        if(root==NULL)
            return;
        st.push(root);
        while(!st.empty())
        {
            TreeNode* cur=st.top();
            st.pop();
            if(cur->right!=NULL)
            {
                st.push(cur->right);
            }
            if(cur->left!=NULL)
            {
                st.push(cur->left);
            }
            if(!st.empty())
            {
                cur->right=st.top();
            }
            cur->left=NULL;
        }
    }
};
PROBLEM-24:
Check for Children Sum Property
CODE:
