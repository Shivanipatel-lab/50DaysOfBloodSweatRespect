PROBLEM-1:
Lowest Common Ancestor in a BST
CODE:
node* LCA(node* root, int n1 ,int n2)
{
   if(root == NULL)
   {
       return NULL;
   }
   
   if(n1 < root->data and n2 < root->data)
    {
        return LCA(root->left, n1 , n2);
    }
    else if(n1 > root->data and n2 > root ->data)
     {
         return LCA(root->right , n1 ,n2);
     }
     else
     {
         return root;
     }
}
    
    
PROBLEM-2:
Print BST elements in given range
CODE:

rohanyt74
1 week ago

class Solution {
 public:
  void inorder(Node*root,vector<int>&v){
     if(root==NULL) return;
     inorder(root->left,v);
     v.push_back(root->data);
     inorder(root->right,v);
 }
   vector<int> printNearNodes(Node *root, int low, int high) {
       //code here   
       vector<int>res;
               vector<int>res1;
       inorder(root,res);
       for(int i=0;i<res.size();i++){
           if(res[i]>=low and res[i]<=high) res1.push_back(res[i]);
       }
       return res1;
       
   }
};