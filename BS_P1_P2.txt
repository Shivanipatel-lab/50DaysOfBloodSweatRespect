  

                                                  Binary Search

PROBLEM : Nth Root of a Number using Binary Search

CODE:

private double epsilon = 0.001;
double findNthRootOfM(int n, long long m) {
	// Write your code here.
    
    double lo = 0;
    double hi = Math.max(1,m);
    
    while (hi - lo > epsilon) {
      double mid = (hi - lo) / 2 + lo;
      double xGuess = Math.pow(mid, n);

      if (xGuess > m) {
        hi = mid;
      } else {
        lo = mid;
      }
    }
    
    return (hi - lo) / 2 + lo;
}





PROBLEM : Matrix Median

CODE:

int countSmallerThanMid(vector<int> &row, int mid) {
    int l = 0, h = row.size() - 1; 
    while(l <= h) {
        int md = (l + h) >> 1; 
        if(row[md] <= mid) {
            l = md + 1;
        }
        else {
            h = md - 1;
        }
    }
    return l; 
}
int Solution::findMedian(vector<vector<int> > &A) {
    int low = INT_MIN;
    int high = INT_MAX; 
    int n = A.size();
    int m = A[0].size(); 
    while(low <= high) {
        int mid = (low + high) >> 1; 
        int cnt = 0;
        for(int i = 0;i<n;i++) {
            cnt += countSmallerThanMid(A[i], mid); 
        }
        
        if(cnt <= (n * m) / 2) low = mid + 1; 
        else high = mid - 1; 
    }
    return low; 
}
